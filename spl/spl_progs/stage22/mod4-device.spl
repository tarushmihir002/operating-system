breakpoint;
alias functionNum R1;
alias currentPID R2;

// Disk Load
if (functionNum == 2) then
	multipush (R1, R2, R3, R4);
	R1 = 3;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop  (R1, R2, R3, R4);

	alias pageNumber R3;
	alias blockNumber R4;
	[DISK_STATUS_TABLE + 0] = 1;
	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = pageNumber;
	[DISK_STATUS_TABLE + 3] = blockNumber;
	[DISK_STATUS_TABLE + 4] = currentPID;

	load (pageNumber, blockNumber);
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;

	multipush (R1, R2, R3, R4);
	call SCHEDULER;
	multipop  (R1, R2, R3, R4);

	breakpoint;
	return;
endif;


// Terminal Write
if(functionNum == 3) then
	multipush(R1,R2,R3);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	
	print R3;
	
	multipush(R1,R2,R3);
	R1 = 9;
	R2 = currentPID;
	call MOD_0;
	multipop(R1, R2,R3);
	
	breakpoint;
	return;
endif;

//Terminal Read
if(functionNum == 4) then

	multipush(R1,R2,R3);
	R1 = 8;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3);
	
	read;
	
	[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
	
	multipush(R1,R2,R3);
	call MOD_5;
	multipop(R1,R2,R3);
	
	alias physicalAddr R4;
	physicalAddr = [PTBR + 2 * ((R3)/512)] * 512 + (R3)%512;
	[physicalAddr] = [PROCESS_TABLE + (currentPID * 16) + 8];
	
	breakpoint;
	return;
	
else
	breakpoint;
	return; 
	
endif;