// loading init code from disk to memory
loadi (65, 7);
loadi (66, 8);

// loading exception handler from disk to memory
loadi (2, 15);
loadi (3, 16);

// loading int 10 module from disk to memory
loadi (22, 35);
loadi (23, 36);

// loading timer interrupt from disk to memory
loadi (4, 17);
loadi (5, 18);

// loading library from disk to memory
loadi (63, 13);
loadi (64, 14);

// setting up the page table base register and page table length register
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

// setting up page table
// library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";

// code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// stack
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

// setting up Stack Pointer and Stack
SP = 8 * 512;
[76 * 512] = [65 * 512 + 1];

// setting up System Status table
[SYSTEM_STATUS_TABLE + 1] = 0;

// setting up the process table entries
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 11] = 80;      // the first free user space page in the memory

ireturn;