// loading timer interrupt from disk to memory
loadi(4,17);
loadi(5,18);

// loading library from disk to memory
loadi(63,13);
loadi(64,14);

// loading int 7 from disk to memory
loadi(16,29);
loadi(17,30);

// loading idle program from disk to memory
loadi(69,11);
loadi(70,12);

// loading init from disk to memory
loadi(65,7);
loadi(66,8);

//loading int 10 module from disk to memory
loadi(22,35);
loadi(23,36);

// loading exception handler routine from disk to memory
loadi(2, 15);
loadi(3, 16);

// --------------------------------- IDLE PROGRAM ---------------------------------

// setting process table
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 4] = CREATED;
[PROCESS_TABLE + 11] = 85;
[PROCESS_TABLE + 12] = 0;
[PROCESS_TABLE + 13] = 8*512;
[PROCESS_TABLE + 14] = PTBR;
[PROCESS_TABLE + 15] = PTLR;

// setting page table 
//Library
[PAGE_TABLE_BASE + 0] = 63;
[PAGE_TABLE_BASE + 1] = "0100";
[PAGE_TABLE_BASE + 2] = 64;
[PAGE_TABLE_BASE + 3] = "0100";

//Heap
[PAGE_TABLE_BASE + 4] = 83;
[PAGE_TABLE_BASE + 5] = "0110";
[PAGE_TABLE_BASE + 6] = 84;
[PAGE_TABLE_BASE + 7] = "0110";

//Code
[PAGE_TABLE_BASE + 8] = 69;
[PAGE_TABLE_BASE + 9] = "0100";
[PAGE_TABLE_BASE + 10] = 70;
[PAGE_TABLE_BASE + 11] = "0100";
[PAGE_TABLE_BASE + 12] = -1;
[PAGE_TABLE_BASE + 13] = "0000";
[PAGE_TABLE_BASE + 14] = -1;
[PAGE_TABLE_BASE + 15] = "0000";

//Stack
[PAGE_TABLE_BASE + 16] = 81;
[PAGE_TABLE_BASE + 17] = "0110";
[PAGE_TABLE_BASE + 18] = 82;
[PAGE_TABLE_BASE + 19] = "0110";

[81*512] = [69*512 + 1];

// --------------------------------- INIT PROGRAM ---------------------------------

// setting process table
[PROCESS_TABLE + 16 + 1] = 1; 
[PROCESS_TABLE + 16 + 4] = RUNNING;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = PTLR;


//setting page table
//library
[PAGE_TABLE_BASE + 20 + 0] = 63;
[PAGE_TABLE_BASE + 20 + 1] = "0100";
[PAGE_TABLE_BASE + 20 + 2] = 64;
[PAGE_TABLE_BASE + 20 + 3] = "0100";

//heap
[PAGE_TABLE_BASE + 20 + 4] = 78;
[PAGE_TABLE_BASE + 20 + 5] = "0110";
[PAGE_TABLE_BASE + 20 + 6] = 79;
[PAGE_TABLE_BASE + 20 + 7] = "0110";

//Code
[PAGE_TABLE_BASE + 20 + 8] = 65;
[PAGE_TABLE_BASE + 20 + 9] = "0100";
[PAGE_TABLE_BASE + 20 + 10] = 66;
[PAGE_TABLE_BASE + 20 + 11] = "0100";
[PAGE_TABLE_BASE + 20 + 12] = -1;
[PAGE_TABLE_BASE + 20 + 13] = "0000";
[PAGE_TABLE_BASE + 20 + 14] = -1;
[PAGE_TABLE_BASE + 20 + 15] = "0000";

//Stack
[PAGE_TABLE_BASE + 20 + 16] = 76;
[PAGE_TABLE_BASE + 20 + 17] = "0110";
[PAGE_TABLE_BASE + 20 + 18] = 77;
[PAGE_TABLE_BASE + 20 + 19] = "0110";

[76*512] = [65*512 + 1];

// setting up other details
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

[SYSTEM_STATUS_TABLE + 1] = 1;

SP = 8*512;

ireturn;