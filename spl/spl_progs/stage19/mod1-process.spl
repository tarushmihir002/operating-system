breakpoint;
alias functionNum R1;

// free user area page
if (functionNum == 2) then
    multipush (R0, R1, R2);
    R1 = 2;
    R2 = [PROCESS_TABLE + R2*16 + 11];
    call MEMORY_MANAGER;
    multipop  (R0, R1, R2);

    breakpoint;
    return;
endif;

// exit process
if (functionNum == 3) then
    alias currentPID R2;
    multipush (R0, R1, R2);
    R1 = 4;
    call PROCESS_MANAGER;
    multipop  (R0, R1, R2);

    multipush (R0, R1, R2);
    R1 = 2;
    call PROCESS_MANAGER;
    multipop  (R0, R1, R2);

    [PROCESS_TABLE + 16*currentPID + 4] = TERMINATED;

    breakpoint;
    return;
endif;

// free page tables
if (functionNum == 4) then
    alias currentPID R2;
    alias currentProcessTableEntry R3;
	
    R3 = [PROCESS_TABLE + 16*currentPID + 14];
    [currentProcessTableEntry + 0] = -1;
    [currentProcessTableEntry + 1] = "0000";
    [currentProcessTableEntry + 2] = -1;
    [currentProcessTableEntry + 3] = "0000";

    alias counter R5;
    counter = 4;
    while (counter < 20) do
        if ([currentProcessTableEntry + counter] != -1) then
            multipush (R0, R1, R2, R5);
            R1 = 2;
            R2 = [currentProcessTableEntry + counter];
            call MEMORY_MANAGER;
            multipop  (R0, R1, R2, R5);

            [currentProcessTableEntry + counter] = -1;
            [currentProcessTableEntry + counter+1] = "0000";

        endif;
        counter = counter + 2;
    endwhile;

    counter = 0;
    while (counter < 10) do
        if (counter == 2 || counter == 3 || counter == 8 || counter == 9) then
            if ([DISK_MAP_TABLE + 10*currentPID + counter] != -1) then
                multipush (R1, R2, R3, R5);
                R1 = 4;
                R2 = [DISK_MAP_TABLE + 10*currentPID + counter];
                call MEMORY_MANAGER;
                multipop (R1, R2, R3, R5);
            endif;
        endif;
        [DISK_MAP_TABLE + currentPID*10 + counter] = -1;

        counter = counter + 1;
    endwhile;

    breakpoint;
    return;
endif;
