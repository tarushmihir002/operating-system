// loading module 7 from disk to memory
loadi(54, 67);
loadi(55, 68);

SP = 85 * 512 - 1;
call BOOT_MODULE;

loadi (93, 70);

//---------------------------------- code 2 PROGRAM --------------------------
//Adding data to process table
[PROCESS_TABLE+(3*16) + 1] = 3;
[PROCESS_TABLE+(3*16) + 4] = CREATED;
[PROCESS_TABLE+(3*16) + 11] = 99; 
[PROCESS_TABLE+(3*16) + 12] = 0;
[PROCESS_TABLE+(3*16) + 13] = 8*512;
[PROCESS_TABLE+(3*16) + 14] = PAGE_TABLE_BASE+(3*20);
[PROCESS_TABLE+(3*16) + 15] = 10;

//setting up the logical pages to link to physical address

//library
[PAGE_TABLE_BASE+(3*20) + 0] = 63;
[PAGE_TABLE_BASE+(3*20) + 1] = "0100";
[PAGE_TABLE_BASE+(3*20) + 2] = 64;
[PAGE_TABLE_BASE+(3*20) + 3] = "0100";

//heap
[PAGE_TABLE_BASE+(3*20) + 4] = 97;
[PAGE_TABLE_BASE+(3*20) + 5] = "0110";
[PAGE_TABLE_BASE+(3*20) + 6] = 98;
[PAGE_TABLE_BASE+(3*20) + 7] = "0110";

//Code
[PAGE_TABLE_BASE+(3*20) + 8] = 93;
[PAGE_TABLE_BASE+(3*20) + 9] = "0100";
[PAGE_TABLE_BASE+(3*20) + 10] = 94;
[PAGE_TABLE_BASE+(3*20) + 11] = "0100";
[PAGE_TABLE_BASE+(3*20) + 12] = -1;
[PAGE_TABLE_BASE+(3*20) + 13] = "0000";
[PAGE_TABLE_BASE+(3*20) + 14] = -1;
[PAGE_TABLE_BASE+(3*20) + 15] = "0000";

//Stack
[PAGE_TABLE_BASE+(3*20) + 16] = 95;
[PAGE_TABLE_BASE+(3*20) + 17] = "0110";
[PAGE_TABLE_BASE+(3*20) + 18] = 96;
[PAGE_TABLE_BASE+(3*20) + 19] = "0110";

//Setting top of stack to the second word in header
[95*512] = [93*512 + 1];

// ------------------------------------------- page tables set -------------------------------------------

SP = 8*512;

ireturn;